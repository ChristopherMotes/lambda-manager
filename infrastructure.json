{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Builds the lambda infrastructure",
  "Parameters" : {
    "BucketName" : {
      "Type" : "String",
      "Default" : "lambda-infrastructure"
    }
  },
  "Resources": {
    "LambdaFunctionBucket": {
      "DependsOn" : "S3LambdaInvokePermission",
      "DeletionPolicy" : "Delete",
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : { "Ref" : "BucketName" },
        "LifecycleConfiguration" : {
          "Rules" : [
            {
              "Status": "Enabled",
              "NoncurrentVersionExpirationInDays": "30",
              "Prefix": "",
              "Id": ""
            }
          ]
        },
        "NotificationConfiguration" : {
          "LambdaConfigurations" : [
            {
              "Function" : { "Fn::Join" : [ ":",  [ "arn:aws:lambda", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "function", "lambda-infrastructure-handler" ] ] },
              "Event" : "s3:ObjectCreated:*",
              "Filter" : {
                "S3Key" : {
                  "Rules" : [{
                    "Name" : "suffix",
                    "Value" : "zip"
                  }]
                }
              }
            }
          ]
        },
        "VersioningConfiguration" : { "Status" : "Enabled" }
      }
    },
    "ArtifactBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : { "Fn::Join" : [ "", [ "codepipline", "-", { "Ref" : "AWS::StackName" }, ".motes" ] ] },
        "AccessControl" : "LogDeliveryWrite",
        "LifecycleConfiguration" : {
          "Rules" : [
            {
              "Status": "Enabled",
              "NoncurrentVersionExpirationInDays": "30",
              "Prefix": "",
              "Id": ""
            }
          ]
        },
        "LoggingConfiguration" : {
          "DestinationBucketName" : { "Fn::ImportValue" : "S3LoggingBucket" },
          "LogFilePrefix" : { "Fn::Join" : [ "-", [ "codepipline", { "Ref" : "AWS::StackName" } ] ] },
        },
        "VersioningConfiguration" : { "Status" : "Enabled" }
      }
    },
    "S3LambdaLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : "/aws/lambda/lambda-infrastructure-handler",
        "RetentionInDays" : 400
      }
    },
    "UpdaterLambdaLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : "/aws/lambda/lambda-infrastructure-updater",
        "RetentionInDays" : 400
      }
    },
    "S3LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["S3LambdaFunction", "Arn" ] },
        "Action" : "lambda:InvokeFunction",
        "Principal" : "s3.amazonaws.com",
        "SourceAccount" : { "Ref" : "AWS::AccountId" },
        "SourceArn" : { "Fn::Join" : [ ":", [ "arn:aws:s3::", { "Ref" : "BucketName" } ] ] }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "lambdapolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogStream", 
                  "logs:PutLogEvents"
                ], 
                "Resource": [
                  { "Fn::GetAtt" : [ "S3LambdaLogGroup", "Arn" ] },
                  { "Fn::GetAtt" : [ "UpdaterLambdaLogGroup", "Arn" ] }
                 ], 
                "Effect": "Allow"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": [
                  { "Fn::Join" : [ ":", [ "arn:aws:lambda", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "function", "lambda-infrastructure-updater" ] ]  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:PublishVersion",
                  "lambda:UpdateFunctionCode"
                ],
                "Resource": [
                  { "Fn::Join" : [ ":", [ "arn:aws:lambda", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "function:*" ] ] }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:Get*",
                  "s3:List*"
                ],
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "BucketName" }, "/*" ] ] } 
              }   
            ]
          }
        }]
      }
    },
    "S3LambdaFunction": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : { "ZipFile" : { "Fn::Join" : [ "\n", [
          "import boto3",
          "import json",
          "def lambda_handler(event, context):",
          "    updaterInfoDict={}",
          "    objectName=\"\"",
          "    for item in event['Records']:",
          "        objectName=item['s3']['object']['key']",
          "    s3ObjectList=objectName.split('/')",
          "    updaterInfoDict['functionName']=s3ObjectList[0]",
          "    updaterJSON=json.dumps(updaterInfoDict)",
          "    lambdaclient = boto3.client('lambda')",
          "    try:",
          "      response = lambdaclient.invoke(",
          "        FunctionName='lambda-infrastructure-updater',",
          "        InvocationType='Event',",
          "        Payload=updaterJSON",
          "      )",
          "      print \"lambda job \" + s3ObjectList[0] + \" sent to lambda-infrastructure-updater\"",
          "    except:",
          "        raise",
          "    return updaterJSON",
          ] ] } },
        "Description" : "Takes events take bucket events and passes the function name to updated to the update function",
        "FunctionName" : "lambda-infrastructure-handler",
        "Handler" : "index.lambda_handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime" : "python2.7",
        "Timeout" : 3,
        "TracingConfig" : {
          "Mode": "PassThrough"
        }
      }
    },
    "UpdaterLambdaFunction": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : { "ZipFile" : { "Fn::Join" : [ "\n", [
          "import boto3",
          "import os",
          "def lambda_handler(event, context):",
          "    s3Bucket=os.environ['s3Bucket']",
          "    s3Key=event['functionName'] + \"/lambda.zip\"",
          "    lambdaclient = boto3.client('lambda')",
          "    try:",
          "        response = lambdaclient.update_function_code(",
          "            FunctionName=event['functionName'],",
          "            S3Bucket=s3Bucket,",
          "            S3Key=s3Key,",
          "            Publish=True",
          "        )",
          "        print event['functionName'] + \" updated succesfully\"",
          "    except:",
          "        raise",
          "    return \"Completed\"",
        ] ] } },
        "Description" : "Updates the controlled functions",
        "Environment" : {
          "Variables": { 
            "s3Bucket" : { "Ref" : "BucketName" }
          }
        },
        "FunctionName" : "lambda-infrastructure-updater",
        "Handler" : "index.lambda_handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime" : "python2.7",
        "Timeout" : 3,
        "TracingConfig" : {
          "Mode": "PassThrough"
        }
      }
    }
  },
  "Outputs" : {
    "LambdaExportedBucket" : {
      "Description" : "The bucket name from an s3 bucket create via template",
      "Value" : { "Ref" : "BucketName" },
      "Export" : {
        "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bucketname" ] ] }
      }
    },
    "LambdaExportedBucketArn" : {
      "Description" : "The bucket name from an s3 bucket create via template",
      "Value" : { "Fn::GetAtt" : [ "LambdaFunctionBucket", "Arn" ] },
      "Export" : {
        "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bucketarn" ] ] }
      }
    },
    "ArtifactExportedBucket" : {
      "Description" : "The bucket name from an s3 bucket create via template",
      "Value" : { "Ref" : "ArtifactBucket" },
      "Export" : {
        "Name" : { "Fn::Join" : [ "-", [ "artifact", { "Ref" : "AWS::StackName" }, "bucketname" ] ] }
      }
    },
    "ArtifactExportedBucketArn" : {
      "Description" : "The bucket name from an s3 bucket create via template",
      "Value" : { "Fn::GetAtt" : [ "ArtifactBucket", "Arn" ] },
      "Export" : {
        "Name" : { "Fn::Join" : [ "-", [ "artifact", { "Ref" : "AWS::StackName" }, "bucketarn" ] ] }
      }
    }
  }
}
